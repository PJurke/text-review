// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Every change needs to be followed by a `npx prisma generate` command to update the Prisma Client.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
/*
  ----- TEXT DOCUMENT -----
*/

model TextDocument {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  author          String
  type            TextDocumentType  @default(UNKNOWN)
  meta            Json?
  paragraphs      Paragraph[]
  textAnalyses    TextAnalysis[]
}

enum TextDocumentType {
  SPEECH
  UNKNOWN
}

model Paragraph {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  text                String

  documentId          String       @db.ObjectId
  textDocument        TextDocument @relation(fields: [documentId], references: [id])

  paragraphAnalyses   ParagraphAnalysis[]
}

/*
  ----- TEXT ANALYSIS -----
*/

model TextAnalysis {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId

  textDocumentId    String                @db.ObjectId
  textDocument      TextDocument          @relation(fields: [textDocumentId], references: [id])

  paragraphAnalyses ParagraphAnalysis[]
}

model ParagraphAnalysis {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  
  paragraphId     String        @db.ObjectId
  paragraph       Paragraph     @relation(fields: [paragraphId], references: [id])

  textAnalysisId  String        @db.ObjectId
  textAnalysis    TextAnalysis  @relation(fields: [textAnalysisId], references: [id])
  
  highlights      Highlight[]
}

model Highlight {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  start               Int
  end                 Int

  paragraphAnalysisId String            @db.ObjectId
  analysis            ParagraphAnalysis @relation(fields: [paragraphAnalysisId], references: [id])
}

/*
  ----- NEXT-AUTH -----
  From Auth.js: https://authjs.dev/getting-started/adapters/prisma 
*/

// This is the Account model used by Auth.js to store user accounts
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// This is the Session model used by Auth.js to store user sessions
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?

  role          UserRole        @default(USER)

  accounts      Account[]
  sessions      Session[]

  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}